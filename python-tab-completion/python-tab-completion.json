{
    "python -b": "issue warnings about str(bytes_instance), str(bytearray_instance)and comparing bytes/bytearray with str. \n(-bb: issue errors)",
    "python -B\u200B": "don't write .pyc files on import;\nalso PYTHONDONTWRITEBYTECODE=x",
    "python -c": "cmd\nprogram passed in as string (terminates option list)",
    "python -d": "turn on parser debugging output (for experts only, only works on debug builds);\nalso PYTHONDEBUG=x",
    "python -E": "ignore PYTHON* environment variables (such as PYTHONPATH)",
    "python -i": "inspect interactively after running script;\nforces a prompt even if stdin does not appear to be a terminal;\nalso PYTHONINSPECT=x",
    "python -I\u200B": "isolate Python from the user's environment (implies -E and -s)",
    "python -m": "mod\nrun library module as a script (terminates option list)",
    "python -O": "remove assert and __debug__-dependent statements;\nadd .opt-1 before .pyc extension; also PYTHONOPTIMIZE=x",
    "python -OO": "do -O changes and also discard docstrings;\nadd .opt-2 before .pyc extension",
    "python -P": "don't prepend a potentially unsafe path to sys.path",
    "python -q": "don't print version and copyright messages on interactive startup",
    "python -s": "don't add user site directory to sys.path; also PYTHONNOUSERSITE",
    "python -S\u200B": "don't imply 'import site' on initialization",
    "python -u": "force the stdout and stderr streams to be unbuffered\nthis option has no effect on stdin; also PYTHONUNBUFFERED=x",
    "python -v": "verbose (trace import statements)\nalso PYTHONVERBOSE=x can be supplied multiple times to increase verbosity",
    "python -V\u200B": "--version\nprint the Python version number and exit\nwhen given twice, print more information about the build",
    "python -W": "arg\nwarning control;\narg is action:message:category:module:lineno also PYTHONWARNINGS=arg",
    "python -x": "skip first line of source, allowing use of non-Unix forms of #!cmd",
    "python -X\u200B": "opt\nset implementation-specific option",
    "python --check-hash-based-pycs": "control how Python invalidates hash-based .pyc files",
    "python --check-hash-based-pycs always": "Python always invalidates hash-based .pyc files",
    "python --check-hash-based-pycs default": "default",
    "python --check-hash-based-pycs never": "Python never invalidates hash-based .pyc files",
    "python --help-env": "print help about Python environment variables and exit",
    "python --help-xoptions": "print help about implementation-specific -X options and exit",
    "python --help-all": "print complete help information and exit",
    "python --h": "print this help message and exit (also -? or --help)"
}
